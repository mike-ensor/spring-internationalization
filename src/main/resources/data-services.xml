<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!--Example of classpath scanning for items under your dao package-->
    <context:component-scan base-package="com.sersol.catalog.dao"/>
    <context:component-scan base-package="com.sersol.catalog.service"/>

    <!-- Spring transaction support -->
    <tx:annotation-driven transaction-manager="catalogTransactionManager"/>

    <!-- Setup a transaction manager -->
    <bean id="catalogTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="catalogDataSource"/>
    </bean>

    <bean id="catalogSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="catalogDataSource"/>
    </bean>

     <!-- Please use data-services.xml for scanning packages and setting up data sources-->
    <jee:jndi-lookup id="solrHost" jndi-name="param/solr/host" default-value="http://127.0.0.1:8080/solr" expected-type="java.lang.String"/>
    <bean id="solrServer" class="org.apache.solr.client.solrj.impl.CommonsHttpSolrServer">
        <constructor-arg type="java.lang.String" value="#{solrHost}" />
    </bean>


    <!-- MyBatis Data Mapper scanning.  Mappers need to be in this package or a subpackage of this. -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="catalogConfigurer">
        <property name="basePackage"  value="com.sersol.catalog.dao.mapper"/>
        <property name="sqlSessionFactoryBeanName"   value="catalogSessionFactory"/>
    </bean>

    <beans profile="default">
        <!-- Don't forget to activate in web.xml -->
        <jee:jndi-lookup jndi-name="jdbc/catalogDataSource" id="catalogDataSource" expected-type="javax.sql.DataSource"/>
    </beans>

    <!-- This profile let's a developer point to a jndi datasource for the catalog and an embedded web state store -->
    <beans profile="dev-local">
        <!-- Don't forget to activate in web.xml -->
        <jee:jndi-lookup jndi-name="jdbc/catalogDataSource" id="catalogDataSource" expected-type="javax.sql.DataSource"/>
        <jdbc:embedded-database id="webStateStoreDataSource">
            <jdbc:script location="classpath:com/sersol/store/scripts/web_state_store_hql.sql"/>
        </jdbc:embedded-database>
    </beans>

    <!--Profile to enable embedded webStateStore must be called embedded -->
    <beans profile="embedded">
        <jdbc:embedded-database id="catalogDataSource">
            <jdbc:script location="classpath:scripts/catalog-embedded.sql" />
        </jdbc:embedded-database>
    </beans>

</beans>